正课: 
1. *****ES5
   
1. 对象的属性: 对对象的属性提供了保护
    命名属性: 
        数据属性:
           四大特性:{
	value: 值,
                 writable: true/false,
                 enumerable: true/false,
                 configurable: true/false
           } 
           获取四大特性: 
           var attrs=
	Object.getOwnPropertyDescriptor(obj,"属性名");
             attrs:{ value:  , writable:   ,   ...}
           修改四大特性:
            Object.defineProperty(obj,"属性名",{
	特性: 值,
                 configurable:false
            })
            如果对象的属性不存在，则自动添加。
           
           特性的默认值: 
               直接量中的属性，特性默认值为true
               defineProperty添加的属性，特性值都为false

           同时修改多个属性的特性:
             Object.defineProperties(obj,{
	属性名1:{
	    四大特性: 
                 },
                 ...
             })
        问题: 无法自定义保护规则
        解决: 
        访问器属性: 不直接保存属性值
                           专门保护其他属性的特殊属性
           何时: 要用自定义规则保护一个属性时
           如何: 
               四大特性: {
	  get:function(){ return  属性值; },
	     //专门负责读取受保护的属性值
                   set:function(value){//专门负责修改受保护属性值
	     //判断value符合自定义规则的要求
                          属性名=value;
                      //否则
	         报错
                   },
                   enumerable: true/false,
                   configurable: true/false
               }
          添加访问器属性: 
              Object.defineProperty(obj,"属性名",{
	  get:function(){return xxx},
                   set:function(value){ xxx=value},
                   enumerable: true/false,
                   configurable: true/false
              });
          原理: 
             读取obj.访问器属性时，自动调用访问器属性的get方法
             给obj.访问器属性赋值时，自动调用set方法，参数value自动获得要赋的新值。
          问题:受访问器属性保护的值不能放在普通的数据属性中
          解决: 使用闭包定义访问器属性和受保护的变量
    内部属性: __proto__   class     
       extensible:true

2. 防篡改: 阻止对已经创建好的对象的属性结构进行篡改
    保护整个对象
    1. 防扩展: 禁止添加新属性。
        判断obj是否可扩展:  Object.isExtensible(obj)
        阻止对obj的任何扩展: Object.preventExtensions(obj)
            将对象的extensible: false
    2. 密封: 在防扩展基础上，再禁止删除任何属性
        判断obj是否密封: Object.isSealed(obj)
        设置obj密封: Object.seal(obj)
            将对象的每个属性configurable:false
        何时: 强烈建议在构造函数结尾都要密封当前对象
    3. 冻结: 在密封基础上，再禁止修改任何属性的值
        判断obj是否被冻结: Object.isFrozen(obj)
        冻结obj: Object.freeze(obj)
            将对象的每个属性writable:false
        何时: 如果一个对象的所有属性值都不允许修改时

3. Object.create(): 基于一个现有父对象
                              创建一个子对象
                              再扩展子对象的自有属性
    何时: 如果先有父对象，再根据父对象创建子对象时
    如何: 
      1. 仅创建子对象: var child=Object.create(father);
      2. 创建子对象时，为子对象扩展自有属性:
　　　var child=Object.create(father,{
	属性名:{
	     四大特性
                 },
                 ...
          })
4. 数组API: 
    判断: 数组中的元素是否满足指定的条件
       arr.every(): 检查数组中每个元素是否都满足条件
       arr.some(): 检查数组中是否包含满足条件的元素
     如何: 
         var bool=
	arr.every(function(val,idx,arr){return 判断结论})
        every会拿function到每个元素上执行一次，获得每个元素的判断结果。――所有判断结果都为true，最后才返回true
        val: 自动获得当前元素值
        idx: 自动获得当前位置
        arr: 指当前正在遍历的数组

   遍历: 对每个元素执行相同的操作
     arr.forEach(): 对原数组中每个元素执行相同的操作
     var newArr=arr.map(): 
         取出原数组中每个元素的值，执行相同的操作后，放入一个新数组中返回
    如何: 
       arr.forEach(function(val,idx,arr){
            arr[idx]=新值;
       })











