1、函数的作用域
	1、局部函数
		将 函数 定义在 某个 函数内
		function fun1(){
			function fun2(){
			
			}

			fun2();//正常调用
		}
		fun2();//超出作用域范围,找不到fun2
	2、全局函数
		parseInt();
		parseFloat();
		encodeURI();
		decodeURI();
		eval();
2、分支结构
	1、什么是分支结构
		根据条件选择某段代码去执行
	2、if-结构
		语法：if(条件){语句块;}
		条件：最好是一个boolean类型的变量或表达式
		注意：
			1、条件如果不是boolean的话，则会自动转换
				以下情况被认为是假：
				if(0){}
				if(0.0){}
				if(""){}
				if(null){}
				if(undefined){}
				if(NaN){}
			2、if后的{}可以省略的
				如果省略的话if只控制其下面的第一句话
	3、if-else 结构
		如果 ... 否则 ...
		语法:
			if(条件){
				//满足条件时执行
			}else{
				//不满足条件时执行
			}
	4、else-if 结构
		语法：
			if(条件1){
				//满足条件1时所执行
			}else if(条件2){
				//满足条件2时所执行
			}else if(条件n){
				//满足条件n时所执行
			}else{
				//以上条件都不满足时执行
			}
	5、条件运算符
		条件?表达式1:表达式2;
		转换成if
		if(条件){
			表达式1
		}else{
			表达式2
		}

		结构复杂时，使用if
		结构简单时，使用条件运算符
		var age=25;
		age>18?"成年":"未成年";
3、分支结构-switch-case
	1、作用
		优先使用在等值判断中
		
	2、语法
		switch(变量/表达式){
			case 值1:
				代码块;
				break; //可选，用于结束 switch结构
			... ...
			default://可选，匹配不上任何 case块时执行
				代码块;
		}
		结束机制：
			1、碰见break
			2、碰见结束{}
		直落：
		switch(变量/表达式){
			case 1:
			case 3:
			case 5:
				console.log("单月份!");
				break;
		}
4、循环结构
	1、什么是循环
		一遍一遍的反复执行相同或相似的代码
	2、循环特点
		1、循环条件
		2、循环操作
	3、循环结构-while循环
		语法：
			while(条件){
				循环操作
			}

			如果 条件为真，则一直执行循环操作
			如果 条件为值，则跳出循环结构

			var i=1;
			while(i<=100){
				console.log(i);
				i++;
			}
		循环的流程控制语句：
		1、continue
			继续，
			终止本次循环，继续执行下次循环
		2、break
			破坏
			终止整个循环结构
5、练习
	1、猜数字游戏
		问题：生成一个随机数0-99范围内。要求用户输入一个数字，与随机数进行比较。
		Math.random();//返回一个0-1之间的小数
		var r = parseInt(Math.random()*100);
		如果 输入的数字 大于 随机数 ，则提示大了,再次输入
		如果 输入的数字 小于 随机数 ，则提示小了，再次输入
		如果 输入的数字 等于 随机数 ，则提示输入正确，结束游戏
		如果 输入的是 exit 的话，则提前结束游戏
	2、猴子吃桃
		问题：
			猴子第一天摘下若干桃子，当即吃了一半，不过瘾，又多吃1个
			第二天，将剩下的桃子又吃掉一半，又多吃1个
			第三天，将剩下的桃子又吃掉一半，又多吃1个
			....
			第十天，只剩下1个桃子
			求：猴子第一天摘了多少桃子

			假设：第一天 摘了 x 个桃子，第10天剩1个
			第10天 x=1
			第9天 x/2-1 = 1  ...4
			第8天 x/2-1 = 4  ...10
			第7天 x/2-1 = 10 ...22

			x = (剩余+1)*2;













