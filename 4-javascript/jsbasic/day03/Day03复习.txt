1、数据类型转换
	1、隐式转换
		typeof() 或 typeof 

		任意数据类型 在和 string 做 + 运算时，都会将其他类型转换string

		boolean 类型 与 number和boolean做运算，最终将 boolean转换为number
	2、转换函数
		1、toString()
			语法:var s = 变量.toString();
		2、parseInt()
			语法：var i = parseInt(数据);
		3、parseFloat()
			语法：var f = parseFloat(数据);

			var f = parseFloat("35");
			结果:35
		4、Number()
			注意：如果待转换的数据中包含非数字或小数点字符，最终结果为 NaN

			Number("35.5"); 结果：35.5
			Number("35.a"); 结果：NaN
2、运算符和表达式
	1、表达式
		由 运算符 和 操作数 来组成的 式子 叫作 表达式
		a+b
		a=b
		每个表达式都有自己的结果
		var a = 15;
		var b = 18;
		console.log(a=b); 18
		console.log(a); 18
	2、运算符
		1、算术运算符
			+,-,*,/,%,++,--
			由算术运算符所组成的表达式叫作算术表达式
			+ ：可以做 加法 也可以做连接
			- ：可以表示 减法， 也可以表示负数
			% ：模，求两个数的余数
			++ ：自增，在自身数值基础上 +1
				var num = 5；
				num ++; : 先使用num的值，再对num进行自增
				++ num; : 先对num的值进行自增，再使用
			-- ：自减，在自身数值基础上 -1
			
			++,-- : 优先级最高
			*/% : 优先级其次
			+,- : 优先级最低
			通过 () 提升优先级

			var num = 35*((2+8)/6);
		2、关系运算符
			1、作用
				... ...
			2、运算符
				>,<,>=,<=,==,!=,===,!==

				=== : 判断 数值 以及 类型 是否相等
				!== : ~
				
				注意：
					1、如果操作数两端都是 数字类型的话
						则按照数字大小进行比较
						var a = 35;
						var b = 18;
						console.log(a>b);
					2、如果 操作数两端 都是 字符串类型的话
						则将两个字符串中的 每位上的字符逐一比较，直到比较出大小为止
						var str1 = "张三丰";
						var str2 = "张无忌";

						第一次比较：
							比较 str1 的第一个字符 "张" 的Unicode码 与 str2 的第一个字符 "张"的Unicode 码，结果 相等
						第二次比较：
							比较 str1 的第二个字符 "三" 的Unicode码 与 str2 的第二个字符 "无"的Unicode 码，结果 无 比 三 大
					3、如果操作数的两端有一个是数字类型的话，那么另外一个数据会自动转换为 数字类型的，然后再进行比较
						问题：1>"3a"
							1、将 3a 转换成数字
								Number("3a"); 结果为 NaN
							2、比较 1 与 NaN
								NaN参与到 比较运算时，结果就是为 false
						问题：1>"5"
							1、将 "5" 转换成数字
								Number("5") 结果为 5
							2、比较 1 与 5 之间的大小
				3、优先级
					>,<,>=,<=  优先级较高
					==,!=,===,!=== 优先级较低 
		3、逻辑运算符
			1、作用
				关联条件
			2、运算符
				!,&&,||
				1、!
					对现有的条件结果取反
					非真即假
					非假即真
				2、&&
					两边的条件都为真时，整个表达式的结果为真
				3、||
					两边的条件只要有一个为真时，整个表达式的结果 为真
			3、短路逻辑
				1、短路 &&
					如果 第一个条件的结果为 false，那么就不会再判断第二个条件，并且整个表达式的值为false
					如果 第一个条件的结果为 true，则继续判断或执行第二个条件或表达式，并且将第二个条件或表达式的结果作为 整个表达式的结果

					var result = 5>3&&"结果为真";
					console.log(result);//结果为真
				2、短路 ||
					如果 第一个条件为真的话，那么整个表达式的结果就为真，不需要判断第二个表达式
					如果 第一个条件为假的话，则继续判断第二个表达式
			4、优先级
				! : 优先级最高
				&& : 优先级其次
				|| : 优先级最低
		4、判断闰年
			条件：
				1、能被4整除 但 不能被 100整数
					1.1 能被 4 整除
					同时满足(&&)
					1.2 不能被100整除
				或(||)
				2、能被400整除

			1、var year = 2016;
				1.1 能被4整除
					year % 4 == 0
					结果 为真 ：则能被4整除
					结果 为假 ：则不能被4整除
				1.2 不能被100整除
					year % 100 != 0
					结果 为真 ：则不能被100整除
					结果 为假 ：则能被100整除
				1.3 能被 400 整除
					year % 400 == 0
					结果 为真 ：则能被400整除
					结果 为假 ：则不能被400整除
				判断闰年：
				(year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)
		
				

			
























