韩向琳
hanxl@tedu.cn


1、Node.js概述
	Node.js官网：nodejs.org
	1、Node.js是使用C++编写的基于V8引擎的JS运行时环境。――js解释器
	2、Node.js是一门基于ECMAScript的服务器端语言，提供了很多（前端js中没有的）扩展对象。――服务器端语言
	前端js对象：
		（1）原生对象：String  Number  Boolean  Date  Math  Array  Error  RegExp  Function Object...
		（2）BOM   &&  DOM
		（3）自定义对象
	Node.js对象：
		（1）原生对象
		（2）Node.js的核心对象
		（3）大量的第三方对象
		（4）自定义对象
	3、Node.js可以编写独立的服务器端应用，无需借助于任何其他web服务器。――web服务器
	
	Node.js的意义：
		（1）执行效率比PHP/JSP/ASPX都要高
		（2）使用一种语言统一了前后端开发――ES
		全栈工程师

	Node.js的特点：
		（1）单线程逻辑处理
		（2）非阻塞
		（3）异步I/O处理
		（4）事件驱动编程

2、Node.js的两种运行模式
	（1）交互模式――用于测试
		交互模式下，Node.js自带的模块无需引入（require()），直接使用。
		执行方法：进入到node环境下，输入一行js语句，回车执行
		两次 ctrl+c 可以退出交互模式
	（2）脚本模式――用于开发
		把要执行的所有的js语句编写在一个文本文件中，一次性的提交给node.js解释执行。该文件可以是.js后缀的，也可以没有后缀，如果没有后缀，默认为.js文件。	
		脚本模式下，Node.js自带的模块需要引入（require()），才能使用。
		执行方法：node 文件路径
			例如：node d:/nodejs/xx.js
			

3、全局对象――Global
	Node.js中的全局对象为Global
	在交互模式下，声明的全局变量和函数，是global的成员。――全局对象污染
	在脚本模式下，声明的全局变量和函数，不是global的成员。――避免了全局对象污染

	Global对象的成员属性和成员方法：
	（1）console 用于向stdout(标准输出)和stderr(标准错误)中输出信息
		console中的成员方法都是异步的，所以输出顺序和书写顺序不一定完全一致。
		console.log()	向stdout输出日志信息
		console.info()	向stdout输出日志信息
		console.error()	向stderr输出错误信息
		console.warn()	向stderr输出错误信息
		console.dir()	向stdout输出指定对象的字符串表示
		console.assert()	断言，为真的断言，错误信息不会输出；为假的断言，抛出错误对象，输出错误信息，并且终止脚本的执行，错误信息可以自定义。
		console.time()	测试代码的执行时间
		console.timeEnd()

		console.Console()	console对象中的Console构造函数，向任意指定的输出流（文件）中执行输入。

	（2）process 进程
		process.arch    //获取CPU架构类型
		process.platform    //获取操作系统类型
		process.env     //获取操作系统的环境变量
		process.cwd()  //获取当前所在工作目录
		process.execPath   //获取Node.js解释器所在
目录
		process.versions    //获取Node.js的版本信息
		process.uptime()   //获取Node.js进程的运行时间（s）
		process.memoryUsage()  //获取Node.js进程内存使用信息
		process.pid	//获取进程id号
		process.kill(pid)       //向指定进程id号发送退出信号
		
	（3）Buffer
		缓冲区，一块专用于存储数据的内存区域，与string类型相对应，用于存储二进制数据。
		Buffer对象的实例，可以通过读取文件获得，也可以直接构造。
		new Buffer();
	（4）定时器
		global.setTimeout()	//一次性定时器
		global.setInterval()  //周期性定时器
		global.setImmediate() //下次事件循环开始之前立即执行的计时器
		process.nextTick()        //本次事件循环结束之后立即执行的计时器
		

4、Node.js的模块系统
	Node.js中使用“Module(模块)”来规划不同的功能对象。
	模块的分类：
	（1）核心模块――Node.js的内置模块
	（2）第三方模块
	（3）自定义模块
	每一个被加载的.js文件对应一个模块对象，包含相应的功能和函数。
	模块内声明的变量和函数的作用域是“模块作用域”，不是Global的成员，默认只能在当前js文件(当前模块)中使用。
	
	Node.js启动时运行的第一个模块称为“主模块”――main module，也是自身模块
	获取主模块对象：
		process.mainModule
		require.main
	除主模块外的其他模块都称为“子模块”
		默认情况下，某一个模块不能直接使用其他模块中封装的数据，但是，每个模块可以导出(exports)自己内部的对象供其他模块使用，也可以引入(require)并使用其他模块导出的对象。
	
	创建模块：定义子模块，使用“exports”公开接口
	主模块引入：使用require()引入创建的子模块，并使用子模块导出的方法。

	每一个模块内部都可以使用一个变量叫“module”，指向当前模块自己。
	判断当前模块是否主模块对象：
		module===process.mainModule

	预定义的模块作用域成员：
		__dirname  //当前模块文件所在的目录
		__filename //当前模块文件所在的目录及文件名
		module      //指向当前模块的引用
		module.exports  //当前模块中待导出的供其他模块使用的对象
		exports      //默认指向module.exports对象的引用
		require      //引入其他模块，使用其他模块的module.exports对象

	自定义模块：
	（1）文件模块
		没有后缀的文件模块，被作为js文件加载
		.js后缀的文件模块，被作为js文件加载
		.json后缀的文件模块，被作为json字符串加载，自动解析为对象
		.node后缀的文件模块，被作为C/C++二进制加载
	（2）目录模块――目录模块引入的时候直接写目录名即可
		
		









