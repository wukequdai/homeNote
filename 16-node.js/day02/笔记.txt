回顾：
	1、Node.js概述：
		（1）Node.js是使用C++编写的基于V8引擎的js运行时环境。――js解释器
		（2）Node.js是一门基于ECMAScript开发的服务器端语言，提供了很多（前端js中没有）的扩展对象。――服务器端语言
		（3）Node.js可以编写独立的服务器端应用，无需借助于任何其他web服务器。――web服务器
	特点：
		（1）单线程逻辑处理
		（2）非阻塞
		（3）异步I/O处理
		（4）事件驱动编程
	2、两种运行模式
		（1）交互模式
		（2）脚本模式
			node 文件路径
	3、全局对象――Global
		（1）console
			console.log()
			console.info()
			console.error()
			console.warn()
			console.dir()
			console.time()
			console.timeEnd()
			console.Console()
		（2）process
			process.arch
			process.platform
			process.env
			process.cwd()
			process.execPath
			process.versions
			process.uptime
			process.memoryUsage()
			process.pid
			process.kill(pid)
		（3）Buffer
			new Buffer()
			buf.toString()
			Buffer.isEncoding()
		（4）定时器
			setTimeout()
			setInterval()
			setImmediate()
			process.nextTick()
	2、模块系统
		分类：
		（1）Node.js核心模块
		（2）第三方模块
		（3）自定义模块
		主模块、子模块
		获取主模块对象：
		process.mainModule
		require.main
		判断当前模块是否主模块：
		module===require.main

		require()  引入其他模块
		exports	导出自己模块中的对象供其他模块使用

		模块的预定义成员：
			__dirname
			__filename
			module
			module.exports
			exports
			require
		自定义模块：
			文件模块：没有后缀 .js .json .node
			目录模块

今天：
1、模块系统
	自定义模块：
	（1）文件模块
		没有后缀的文件模块，被作为js文件加载
		.js后缀的文件模块，被作为js文件加载
		.json后缀的文件模块，被作为json字符串加载，自动解析为对象
		.node后缀的文件模块，被作为C/C++二进制加载
	（2）目录模块――目录模块引入的时候直接写目录名即可
		包含package.json文件的目录
			{"main":"xx.js"}
		包含index.js文件的目录
		包含index.json文件的目录
		包含index.node文件的目录
	把模块放入当前项目目录下的node_modules文件夹中时，引入模块时直接写模块名即可，不必写路径。
	模块的查找顺序：
		（1）文件/目录模块的缓存
		（2）核心模块的缓存
		（3）核心模块
		（4）文件/目录模块
2、npm和包
	包(package)是根据CommonJS规范，对模块进行的标准封装。
	包规范：
		-包是一个目录
		-目录中包含一个包说明文件package.json，存放于包顶级目录下
		-目录中包含.js文件，如有index.js可以放到包顶级目录下
		-其他js文件放到lib目录下
		-二进制文件放到bin目录下
		-文档放到doc目录下
		-单元测试文件放到test目录下
	根据CommonJS规范要求，包应该位于当前目录或父目录下的node_modules文件夹下，require引入的时候，由近及远进行查找。
	
	npm――包管理器
	Node.js的包管理工具，用于下载安装、升级、删除包，或者发布并维护包。
	官网：www.npmjs.com
	下载第三方包：
		npm install 包名    下载到当前目录下
		npm install 包名 -g   下载到全局
		下载的包会默认放到node_modules目录下
		下载包的时候，可以指定下载某个版本：
		npm install 包名@2.x
		查看目标路径：
			npm root
			npm root -g
	列出已经安装的包：npm ls
	更新已经安装的包：npm update 包名
	卸载已经安装的包：npm uninstall 包名
	生成package.json：
		使用npm init 命令，可以在当前目录下生成一个package.json文件
	发布：
		（1）使用npm adduser命令注册新账号或登录已有账号
		（2）进入配置完成的包目录，使用npm publish命令发布包



	命令行工具的常用命令：
	进入某个盘符：d:
	定位到某个目录：cd xx/xx/xx


3、Node.js的核心模块
	（1）Query String模块
		提供了处理url中的"查询字符串"部分的相关操作
		parse()	//从查询字符串解析出数据对象，参数为要解析的查询字符串
		stringify()	//将数据对象转换为查询字符串格式，必选参数1，为要转换的对象；可选参数2，指定键值对之间的分隔符；可选参数3，指定键和值之间的分隔符
	（2）URL模块
		提供了处理url中不同部分的相关操作
		parse()	//解析出url中的各个组成部分，参数1，要解析的url；可选参数2，若为true，query部分直接被解析为对象
		format()	//将对象反向格式化为url格式，参数为url对象
		resolve()	//根据基地址和相对地址解析出目标地址，参数1，基地址；参数2，相对地址
	（3）Path模块
		提供了对文件路径进行操作的相关方法
		parse()	//解析一个路径，参数为路径字符串
		format()	//将路径对象格式化为字符串，参数为路径对象
		join()	//连接路径
		resolve()	//根据基础路径解析出一个目标路径的绝对路径
		relative()	//根据基础路径获取目标路径与其的相对关系
	（4）DNS模块
		提供了域名和IP地址的双向解析功能
		lookup()	//把一个域名解析为IP地址，从操作系统缓存中查询，参数1，域名；参数2，回调函数，回调函数参数1，err，如果解析失败，创建错误对象；回调函数参数2，address，IP地址；回调函数参数3，family，DNS是IPv4或IPv6.
		resolve()	//把一个域名解析为DNS记录解析数组，从DNS服务器中查询。参数1，域名；参数2，回调函数，回调函数参数1，err，如果解析失败，创建错误对象；回调函数参数2，address，IP地址。
		reverse()	//把一个IP地址反向解析为一组域名。参数1，IP地址；参数2，回调函数，回调函数参数1，err，如果解析失败，创建错误对象；回调函数参数2，hostname，解析出来的域名。
	（5）Util 工具模块
		format() //使用带%号占位符的方式格式化字符串，%s,表示string类型；%d，表示number类型；%j，将对象转换为json字符串格式。
		inspect()	//返回一个对象的字符串表示
		inherits()	//实现两个构造方法之间的继承，参数1，子构造函数；参数2，父构造函数
	
	（6）FS模块
		提供了文件的读写、更名、删除、遍历目录等操作。
		fs模块中大多数的方法都提供了同步和异步两种。
		所有的异步方法中，都带有回调函数，文件操作完毕，触发回调函数，执行回调函数中的处理程序。
		同步方法中，如果操作文件发生错误，会抛出错误对象，终止程序运行。
		异步方法中，回调函数的第一个参数，都是一个error错误对象，如果操作文件失败，错误对象会被创建，但不抛出，不会终止其他程序的运行。所以，我们需要收到判断error对象是否存在，来进行相应的处理。

	常用class：
		fs.Stats	//文件或目录的统计信息描述对象
		fs.ReadStream    //stream.Readable接口的实现对象
		fs.WriteStream   //stream.Writable接口的实现对象
		fs.FSWatcher      //可用于监视文件修改的文件监视器对象

	常用方法：
		fs.stat() &&  fs.statSync() //返回一个文件或目录的统计信息对象
		fs.mkdir()  &&  fs.mkdirSync()  //创建目录
		fs.rmdir()  &&  fs.rmdirSync()   //删除目录
		fs.readdir()  &&  fs.readdirSync()  //读取目录下的内容
		fs.readFile()  && fs.readFileSync()  //读取文件的内容
		fs.writeFile()  && fs.writeFileSync()  //向文件中写入内容
		fs.appendFile() && fs.appendFileSync  //向文件中追加内容
		fs.unlink()  && fs.unlinkSync()    //删除文件
		fs.rename()  && fs.renameSync()  //重命名文件
	------------------------------------------------------
	返回一个文件或目录的统计信息对象（fs.Stats）	
	fs.stat() &&  fs.statSync()
	fs.Stats对象的常用方法：
		stats.isFile()    //是否文件
		stats.isDirectoty  //是否为目录
	-------------------------------------------------------
	操作目录的方法：
	fs.mkdir()  &&  fs.mkdirSync()  //创建目录
	fs.rmdir()  &&  fs.rmdirSync()   //删除目录
	fs.readdir()  &&  fs.readdirSync()  //读取目录下的内容

	--------------------------------------------------------
	操作文件的方法：
	fs.readFile()  && fs.readFileSync()  //读取文件的内容
	fs.writeFile()  && fs.writeFileSync()  //向文件中写入内容，如果当前文件不存在，则自动创建；如果当前文件存在，则替换掉文件中的原有内容
	fs.appendFile() && fs.appendFileSync  //向文件中追加内容，如果当前文件不存在，则自动创建；如果当前文件存在，则在原有内容后面追加内容
	fs.unlink()  && fs.unlinkSync()    //删除文件
	fs.rename()  && fs.renameSync()  //重命名文件
	
	











